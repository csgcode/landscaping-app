AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless appointment scheduling (API + Lambdas + DynamoDB + SNS + SQS)

Parameters:
  ProjectName:
    Type: String
    Default: landscaping-app
    Description: Logical project/app name used in resource names and tags
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Deployment environment
  LogRetentionInDays:
    Type: Number
    Default: 30
    Description: CloudWatch Logs retention in days
  WeatherApiKeySecretArn:
    Type: String
    Default: ''
    Description: Secrets Manager ARN that stores the weather API key (leave blank to skip)

Globals:
  Function:
    Runtime: python3.11
    Architectures: [arm64]
    MemorySize: 256
    Timeout: 30
    Tracing: Active
    Handler: app.handler
    ReservedConcurrentExecutions: 5
    
    #Filter and keep only common required envs at global level
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        PROJECT_NAME: !Ref ProjectName
        APPOINTMENTS_TABLE_NAME: !Sub '${Environment}-${ProjectName}-appointments'
        USER_SERVICE_URL: !Ref UserServiceUrl
        SERVICES_SERVICE_URL: !Ref ServicesServiceUrl
        WEATHER_CHECK_QUEUE_URL: !Ref WeatherCheckQueue
        REMINDER_QUEUE_URL: !Ref ReminderQueue
        NOTIFICATIONS_TOPIC_ARN: !Ref NotificationsTopic
        WEATHER_API_KEY_SECRET_ARN: !Ref WeatherApiKeySecretArn
        API_TIMEOUT: 5
    Tags:
      Project: !Ref ProjectName
      Environment: !Ref Environment
      ManagedBy: SAM

Parameters:
  UserServiceUrl:
    Type: String
    Description: User Service API base URL
    Default: https://users-api.landscaping.com
  
  ServicesServiceUrl:
    Type: String
    Description: Services Service API base URL
    Default: https://services-api.landscaping.com

Resources:

  ### -------------------- Data: DynamoDB --------------------
  AppointmentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${Environment}-${ProjectName}-appointments'
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: appointment_id
          AttributeType: S
        - AttributeName: gsi_date_pk
          AttributeType: S
        - AttributeName: scheduled_at
          AttributeType: S
        - AttributeName: client_id
          AttributeType: S
      KeySchema:
        - AttributeName: appointment_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: by_date
          Projection:
            ProjectionType: ALL
          KeySchema:
            - AttributeName: gsi_date_pk
              KeyType: HASH
            - AttributeName: scheduled_at
              KeyType: RANGE
        - IndexName: by_client_history
          Projection:
            ProjectionType: ALL
          KeySchema:
            - AttributeName: client_id
              KeyType: HASH
            - AttributeName: scheduled_at
              KeyType: RANGE
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: SAM

  ClientsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${Environment}-${ProjectName}-clients'
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      AttributeDefinitions:
        - AttributeName: client_id
          AttributeType: S
      KeySchema:
        - AttributeName: client_id
          KeyType: HASH
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: SAM

  ### -------------------- Messaging: SNS --------------------
  NotificationsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${Environment}-${ProjectName}-notifications'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: SAM

  ### -------------------- Messaging: SQS --------------------
  WeatherCheckDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${Environment}-${ProjectName}-weather-check-dlq'
      MessageRetentionPeriod: 1209600
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: SAM

  WeatherCheckQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${Environment}-${ProjectName}-weather-check-queue'
      VisibilityTimeout: 300
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt WeatherCheckDLQ.Arn
        maxReceiveCount: 5
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: SAM

  ReminderDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${Environment}-${ProjectName}-reminder-dlq'
      MessageRetentionPeriod: 1209600
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: SAM

  ReminderQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${Environment}-${ProjectName}-reminder-queue'
      VisibilityTimeout: 300
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt ReminderDLQ.Arn
        maxReceiveCount: 5
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: SAM

  ### -------------------- API Gateway --------------------
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub '${Environment}-${ProjectName}-api'
      StageName: !Ref Environment
      TracingEnabled: true
      Cors:
        AllowMethods: "'OPTIONS,POST'"
        AllowHeaders: "'Content-Type,Idempotency-Key,X-Correlation-Id'"
        AllowOrigin: "'*'"  # Update this to set accepted domains
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          ThrottlingBurstLimit: 100
          ThrottlingRateLimit: 50
      OpenApiVersion: '3.0.1'
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: !Sub '${ProjectName} ${Environment} API'
          version: '1.0.0'
        paths:
          /appointments:
            post:
              x-amazon-apigateway-integration:
                type: aws_proxy
                httpMethod: POST
                uri:
                  Fn::Sub:
                    - arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateAppointmentFunction.Arn}/invocations
                    - {}
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/CreateAppointmentRequest'
              responses:
                '201':
                  description: Created
                '400':
                  description: Bad Request
                '409':
                  description: Conflict (Idempotency)
                '500':
                  description: Internal Server Error
        components:
          schemas:
            CreateAppointmentRequest:
              type: object
              required: [client_id, service_id, scheduled_at]
              properties:
                client_id:
                  type: string
                service_id:
                  type: string
                scheduled_at:
                  type: string
                  format: date-time
                notes:
                  type: string
                  maxLength: 1024
      Tags:
        Project: !Ref ProjectName
        Environment: !Ref Environment
        ManagedBy: SAM

  ### -------------------- Lambdas --------------------

  # create-appointment (API)
  CreateAppointmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Environment}-${ProjectName}-create-appointment'
      Description: Validate payload, create appointment (idempotent), enqueue weather check and reminder
      CodeUri: serverless/src/functions
      Handler: create_appointment.handler
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Sid: DdbRW
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:ConditionCheckItem
              Resource:
                - !GetAtt AppointmentsTable.Arn
                - !GetAtt ClientsTable.Arn
            - Sid: SQSSend
              Effect: Allow
              Action: sqs:SendMessage
              Resource:
                - !GetAtt WeatherCheckQueue.Arn
                - !GetAtt ReminderQueue.Arn
            - Sid: GetSecret
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !If
                - HasSecret
                - !Ref WeatherApiKeySecretArn
                - !Ref AWS::NoValue
      Events:
        ApiPostAppointments:
          Type: Api
          Properties:
            RestApiId: !Ref RestApi
            Path: /appointments
            Method: post

  # check-weather (SQS consumer)
  CheckWeatherFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Environment}-${ProjectName}-check-weather'
      Description: Consume weather-check messages, call external weather API, update risk, publish notifications
      CodeUri: src/check_weather/
      Timeout: 60
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Sid: DdbRW
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource:
                - !GetAtt AppointmentsTable.Arn
                - !GetAtt ClientsTable.Arn
            - Sid: SQSConsume
              Effect: Allow
              Action:
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
                - sqs:ChangeMessageVisibility
              Resource: !GetAtt WeatherCheckQueue.Arn
            - Sid: SNSPublish
              Effect: Allow
              Action: sns:Publish
              Resource: !Ref NotificationsTopic
            - Sid: GetSecret
              Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !If
                - HasSecret
                - !Ref WeatherApiKeySecretArn
                - !Ref AWS::NoValue
      Events:
        WeatherQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt WeatherCheckQueue.Arn
            BatchSize: 5
            MaximumBatchingWindowInSeconds: 5

  # send-reminder (SQS consumer)
  SendReminderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Environment}-${ProjectName}-send-reminder'
      Description: Consume reminder messages, compose & send notifications via SNS
      CodeUri: src/send_reminder/
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Sid: DdbReadWrite
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource:
                - !GetAtt AppointmentsTable.Arn
                - !GetAtt ClientsTable.Arn
            - Sid: SQSConsume
              Effect: Allow
              Action:
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
                - sqs:ChangeMessageVisibility
              Resource: !GetAtt ReminderQueue.Arn
            - Sid: SNSPublish
              Effect: Allow
              Action: sns:Publish
              Resource: !Ref NotificationsTopic
      Events:
        ReminderQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ReminderQueue.Arn
            BatchSize: 5
            MaximumBatchingWindowInSeconds: 5

  ### -------------------- CloudWatch LogGroups (explicit retention) --------------------
  CreateAppointmentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${CreateAppointmentFunction}'
      RetentionInDays: !Ref LogRetentionInDays
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: SAM

  CheckWeatherLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${CheckWeatherFunction}'
      RetentionInDays: !Ref LogRetentionInDays
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: SAM

  SendReminderLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${SendReminderFunction}'
      RetentionInDays: !Ref LogRetentionInDays
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: SAM

Conditions:
  HasSecret: !Not [ !Equals [ !Ref WeatherApiKeySecretArn, "" ] ]

Outputs:
  ApiBaseUrl:
    Description: API base URL
    Value: !Sub 'https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${Environment}-${ProjectName}-api-url'

  AppointmentsTableName:
    Description: Appointments table name
    Value: !Ref AppointmentsTable
    Export:
      Name: !Sub '${Environment}-${ProjectName}-appointments-table'

  ClientsTableName:
    Description: Clients table name
    Value: !Ref ClientsTable
    Export:
      Name: !Sub '${Environment}-${ProjectName}-clients-table'

  WeatherCheckQueueUrl:
    Description: Weather check queue URL
    Value: !Ref WeatherCheckQueue

  ReminderQueueUrl:
    Description: Reminder queue URL
    Value: !Ref ReminderQueue

  NotificationsTopicArn:
    Description: SNS notifications topic ARN
    Value: !Ref NotificationsTopic
